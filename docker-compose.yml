version: "3.6"
services:

  auto-nlp-core:
    container_name: auto-nlp-core-${ENVIRONMENT}
    image: ghcr.io/fhswf/auto-nlp-core
    build:
      context: .
      args:
        - ASSET_PATH=${ASSET_PATH}
    ports:
      - "${AUTONLP_CORE_PORT:-3000}:${AUTONLP_CORE_PORT:-3000}"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - auto-nlp-huggingface-search
    networks:
      - auto-nlp-services
    environment:
      - AUTONLP_CORE_PUBLIC_URL=${AUTONLP_CORE_PUBLIC_URL}
      - AUTONLP_DEPLOYMENT_PROXY_ENTRYPOINT_URL=${AUTONLP_DEPLOYMENT_PROXY_ENTRYPOINT_URL}
      - AUTONLP_HF_SEARCH_SERVICE_URL=http://auto-nlp-huggingface-search:3001
      - AUTONLP_DEPLOYMENT_URL=http://auto-nlp-deployment:3002
      - MONGODB_URI=${MONGODB_URI:-mongodb://auto-nlp-mongodb:27017/auto-nlp-core}
      - MONGODB_USER=${MONGODB_USER}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - NODE_ENV=${AUTONLP_ENV}
    restart: always

  auto-nlp-huggingface-search:
    container_name: auto-nlp-huggingface-search-${ENVIRONMENT}
    image: ghcr.io/fhswf/auto-nlp-huggingface-search
    build:
      context: packages/auto-nlp-huggingface-search
    expose:
      - "3001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - auto-nlp-services
    environment:
      - PYTHON_ENV=${AUTONLP_ENV}
    restart: always

  auto-nlp-deployment:
    container_name: auto-nlp-deployment-${ENVIRONMENT}
    image: ghcr.io/fhswf/auto-nlp-deployment
    build:
      context: packages/auto-nlp-deployment
      args:
        PORT: 3002
    expose:
      - "3002"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - auto-nlp-services
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - REDIS_HOST=${REDIS_HOST:-auto-nlp-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_TRACKING_USERNAME=${MLFLOW_TRACKING_USERNAME}
      - MLFLOW_TRACKING_PASSWORD=${MLFLOW_TRACKING_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL:-http://auto-nlp-minio:9000}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - PYTHON_ENV=${AUTONLP_ENV}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/autonlp/.ssh:/root/.ssh:ro
#      - $SSH_AUTH_SOCK:/var/run/ssh-agent # Forward local machine SSH agent to docker
    restart: always

  auto-nlp-deployment-executor:
    container_name: auto-nlp-deployment-executor-${ENVIRONMENT}
    image: ghcr.io/fhswf/auto-nlp-deployment
    entrypoint: pipenv run dramatiq --path="./src" main_dramatiq
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - auto-nlp-services
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - REDIS_HOST=${REDIS_HOST:-auto-nlp-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PYTHON_ENV=${AUTONLP_ENV}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/autonlp/.ssh:/root/.ssh:ro
#      - $SSH_AUTH_SOCK:/var/run/ssh-agent # Forward local machine SSH agent to docker
    restart: always

  auto-nlp-traefik:
    image: "traefik:v2.4"
    container_name: auto-nlp-traefik-${ENVIRONMENT}
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.http=true"
      - "--providers.http.endpoint=http://auto-nlp-core:3000/deployments/proxy/config"
      - "--entrypoints.web.address=:80"
    ports:
      - "${AUTONLP_TRAEFIK_ENTRYPOINT_PORT}:80"
      - "8086:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - auto-nlp-deployments
      - auto-nlp-services
    restart: always

  auto-nlp-redis:
    image: "redis:latest"
    container_name: auto-nlp-redis-${ENVIRONMENT}
    expose:
      - "6379"
    networks:
      - auto-nlp-services
    restart: always

  auto-nlp-mongodb:
    image: "mongo:latest"
    container_name: auto-nlp-mongodb-${ENVIRONMENT}
    volumes:
      - "/home/autonlp/mongodb/data:/data/db"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    expose:
      - "27017"
    networks:
      - auto-nlp-services
    restart: always

  auto-nlp-mlflow-tracking:
    image: "ghcr.io/fhswf/mlflow-tracking-server:latest"
    container_name: auto-nlp-mlflow-tracking-${ENVIRONMENT}
    volumes:
      - "/home/autonlp/mlflow:/data"
    ports:
      - ${MLFLOW_TRACKING_PORT:-3005}:5000
    environment:
      - BACKEND_STORE_URI=${BACKEND_STORE_URI:-sqlite:///data/sqlite.db}
      - BUCKET_URI_OR_LOCAL_PATH=${BUCKET_URI_OR_LOCAL_PATH:-/data/mlruns}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL:-http://auto-nlp-minio:9000}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - auto-nlp-services
    restart: always

  auto-nlp-minio:
    image: minio/minio
    container_name: auto-nlp-minio-${ENVIRONMENT}
    command: server /data --console-address ":9001"
    volumes:
      - "/home/autonlp/minio:/data"
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    expose:
      - "9000"
      - "9001"
    ports:
      - "${AUTONLP_MINIO_PORT}:9000"
      - "${AUTONLP_MINIO_CONSOLE_PORT}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - auto-nlp-services
    restart: always

  createbuckets:
    image: minio/mc
    depends_on:
      - auto-nlp-minio
    environment:
      - BUCKET_URI_OR_LOCAL_PATH=$BUCKET_URI_OR_LOCAL_PATH
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    entrypoint: >
      /bin/bash -c 'BUCKET_NAME=$$(echo "${BUCKET_URI_OR_LOCAL_PATH}" | sed -n "s/s3:\/\/\(.*\)/\1/p") &&
      echo $$BUCKET_NAME;
      /usr/bin/mc alias set minio http://auto-nlp-minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc rm -r --force minio/$$BUCKET_NAME;
      /usr/bin/mc mb minio/$$BUCKET_NAME;
      exit 0;
      '
    networks:
      - auto-nlp-services
    profiles:
      - setup

networks:
  auto-nlp-deployments:
    name: auto-nlp-deployments-${ENVIRONMENT}
    driver: 'bridge'
  auto-nlp-services:
    name: auto-nlp-services-${ENVIRONMENT}

